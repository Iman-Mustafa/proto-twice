import type { NextApiRequest, NextApiResponse } from 'next';
import { OpenAI } from 'openai';

interface GenerateRequest {
  prompt: string;
  fidelity: 'high' | 'medium' | 'low';
}

interface GenerateResponse {
  html?: string;
  error?: string;
  components?: string[];
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<GenerateResponse>
) {
  // Validate HTTP method
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // Validate request body
  if (!req.body.prompt || typeof req.body.prompt !== 'string') {
    return res.status(400).json({ error: 'Invalid prompt provided' });
  }

  const { prompt, fidelity } = req.body as GenerateRequest;

  try {
    // Initialize OpenAI client
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    // Create fidelity instructions
    const fidelityMap = {
      high: 'Create a high-fidelity, pixel-perfect design with realistic styling, colors, and interactions. Use modern UI components with proper spacing and typography.',
      medium: 'Create a balanced design with good styling but not overly detailed. Focus on layout structure and basic styling.',
      low: 'Create a low-fidelity wireframe with minimal styling, focusing only on layout and structure. Use simple boxes and placeholders.'
    };

    // System prompt with design guidelines
    const systemPrompt = `
    You are an expert UI/UX designer and frontend developer. Generate a complete HTML page with embedded CSS and JavaScript for a web prototype based on the user's description.
    
    Requirements:
    1. Use responsive design with mobile-first approach
    2. Include all necessary HTML boilerplate
    3. Use modern CSS (Flexbox/Grid) with Tailwind-like utility classes
    4. Make it interactive where appropriate
    5. Ensure accessibility (proper ARIA labels, semantic HTML)
    6. ${fidelityMap[fidelity]}
    
    Output ONLY the raw HTML code without any markdown formatting or additional explanations.
    `;

    // Call OpenAI API
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 3000,
    });

    // Extract and clean the HTML response
    const rawHtml = completion.choices[0]?.message?.content || '';
    const cleanedHtml = cleanHtmlResponse(rawHtml);

    if (!cleanedHtml) {
      throw new Error('No valid HTML generated by AI');
    }

    // Extract components for potential future use
    const components = extractComponents(cleanedHtml);

    return res.status(200).json({ 
      html: cleanedHtml,
      components
    });

  } catch (error) {
    console.error('AI generation error:', error);
    const errorMessage = error instanceof Error ? error.message : 'AI generation failed';
    return res.status(500).json({ error: errorMessage });
  }
}

// Helper function to clean AI-generated HTML
function cleanHtmlResponse(html: string): string {
  // Remove markdown code blocks if present
  let cleaned = html.replace(/```html/g, '').replace(/```/g, '').trim();

  // Ensure proper HTML structure
  if (!cleaned.startsWith('<!DOCTYPE html>') && !cleaned.startsWith('<html')) {
    cleaned = `<!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Generated Prototype</title>
    </head>
    <body>
      ${cleaned}
    </body>
    </html>`;
  }

  return cleaned;
}

// Helper function to extract components from HTML
function extractComponents(html: string): string[] {
  const componentRegex = /<div[^>]*class="[^"]*(component|card|section|widget)[^"]*"[^>]*>/gi;
  const matches = html.match(componentRegex) || [];
  return Array.from(new Set(matches)).slice(0, 5); // Return unique components (max 5)
}